# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'specific'
    project: '6c1b3fd3-1ce0-4cf5-b1ba-b11dfbc70d09'
    pipeline: '143287'
    buildVersionToDownload: 'latestFromBranch'
    branchName: 'refs/heads/master'
    downloadType: 'specific'
    downloadPath: '$(System.DefaultWorkingDirectory)'
- task: InstallSSHKey@0
  inputs:
    knownHostsEntry: '$(KNOWN_HOST)' 
    sshPublicKey: '$(SSH_PUBLIC_KEY)'
    sshKeySecureFile: 'azure-pipelines-ssh-key'
- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'
- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: mocimages-connection
- task: GoTool@0
  inputs:
    version: '1.15.x'

- script: |
    git config --global url.ssh://git@github.com/.insteadOf https://github.com/
    chmod +x hack/ensure-kustomize.sh
    chmod +x hack/gen-flavors.sh
    chmod +x hack/for-pipeline.sh
    hack/ensure-kustomize.sh
    hack/for-pipeline.sh

    GOPATH_BIN="$(go env GOPATH)/bin/"
    PATH=$GOPATH_BIN:$PATH

    RANDOM=$$
    TagNum=$(( $RANDOM % 1000 ))
    make REGISTRY=mocimages.azurecr.io IMAGE_NAME=caphcontroller-staging PATCH_VER=$TagNum docker-build docker-push
    make REGISTRY=mocimages.azurecr.io IMAGE_NAME=caphcontroller-staging PATCH_VER=$TagNum release
    make REGISTRY=mocimages.azurecr.io IMAGE_NAME=caphcontroller-staging PATCH_VER=$TagNum generate-flavors
    make REGISTRY=mocimages.azurecr.io IMAGE_NAME=caphcontroller-staging PATCH_VER=$TagNum release-pipelines

    sudo snap install yq

    /snap/bin/yq ea '. as $item ireduce ({}; . * $item )' deployment/cloud-operator.yaml > query.yaml
    /snap/bin/yq eval '.spec.template.spec.containers[0].image' query.yaml
    imagename=$(/snap/bin/yq eval '.spec.template.spec.containers[0].image' query.yaml)

    # pull pipeline image and copy the ci caph yaml into it.
    docker pull $imagename
    docker run -dit --name override $imagename
    docker cp out/infrastructure-components.yaml override:/var/lib/msk8s/deployment/infrastructure-azurestackhci/v0.4.0/infrastructure-components.yaml
    docker commit override $imagename

    # tag the new ci image for caph.
    new_imagename="$imagename-caph"
    docker tag $imagename $new_imagename
    docker push $new_imagename
    sed -i "s|$imagename|$new_imagename|g" deployment/cloud-operator.yaml

    cp deployment/cloud-operator.yaml out/
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Build CAPH'

- publish: $(System.DefaultWorkingDirectory)/out
  artifact: releases

- publish: $(System.DefaultWorkingDirectory)/templates
  artifact: templates
  
