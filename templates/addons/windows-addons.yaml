---
apiVersion: v1
data:
  run-script.ps1: |-
    $ErrorActionPreference = "Stop";
    mkdir -force /host/var/lib/kube-proxy/var/run/secrets/kubernetes.io/serviceaccount
    mkdir -force /host/kube-proxy
    cp -force /kube-proxy/* /host/kube-proxy
    cp -force /var/lib/kube-proxy/* /host/var/lib/kube-proxy
    cp -force /var/run/secrets/kubernetes.io/serviceaccount/* /host/var/lib/kube-proxy/var/run/secrets/kubernetes.io/serviceaccount #FIXME?
    $networkName = (Get-Content /host/etc/cni/net.d/* | ConvertFrom-Json).name
    $sourceVip = ($env:POD_IP -split "\.")[0..2] + 0 -join "."
    $filePath="/host/var/lib/kube-proxy/config.conf"
    $tempFilePath="/host/var/lib/kube-proxy/configCopy.conf"

    $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("sourceVip:")) {$_}}
    $replace = "  sourceVip: " + $sourceVip
    if ($find) {
        (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath
    } else {
        $replace = "winkernel:`r`n  sourceVip:" + $sourceVip + "`r`n"
        $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("winkernel:")) {$_}}
        if ($find) {
            (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath    
        } else {
            (Get-Content -Path $filePath) + $replace | Add-Content $tempFilePath
        }    
    }
    Remove-Item -Path $filePath
    Move-Item -Path $tempFilePath -Destination $filePath

    $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("networkName:")) {$_}}
    $replace = "  networkName: " + $networkName
    if ($find) {
        (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath
    } else {
        $replace = "winkernel:`r`n  networkName:" + $networkName + "`r`n"
        $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("winkernel:")) {$_}}
        if ($find) {
            (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath    
        } else {
            (Get-Content -Path $filePath) + $replace | Add-Content $tempFilePath
        }    
    }
    Remove-Item -Path $filePath
    Move-Item -Path $tempFilePath -Destination $filePath

    $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("WinOverlay:")) {$_}}
    $replace = "  WinOverlay: " + "true"
    if ($find) {
        (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath
    } else {
        $replace = "featureGates:`r`n  WinOverlay: true`r`n"
        $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("featureGates:")) {$_}}
        if ($find) {
            (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath    
        } else {
            (Get-Content -Path $filePath) + $replace | Add-Content $tempFilePath
        }    
    }
    Remove-Item -Path $filePath
    Move-Item -Path $tempFilePath -Destination $filePath
    
    $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("mode:")) {$_}}
    $replace = "mode: " + "kernelspace"
    if ($find) {
        (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath
    } else {
        $replace = "mode: kernelspace`r`n"
        (Get-Content -Path $filePath) + $replace | Add-Content $tempFilePath
    }
    Remove-Item -Path $filePath
    Move-Item -Path $tempFilePath -Destination $filePath
    wins cli process run --path /kube-proxy/kube-proxy.exe --args "--config=/var/lib/kube-proxy/config.conf --hostname-override=$env:NODE_NAME --feature-gates=WinOverlay=true"
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: kube-proxy 
  name: kube-proxy-windows
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: kube-proxy
  name: kube-proxy-windows
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: kube-proxy-windows
  template:
    metadata:
      labels:
        k8s-app: kube-proxy-windows
    spec:
      serviceAccountName: kube-proxy
      containers:
      - command:
        - powershell
        args:
        - -file
        - /var/lib/kube-proxy-windows/run-script.ps1
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: kubeproxywin/kube-proxy
        imagePullPolicy: IfNotPresent
        name: kube-proxy
        volumeMounts:
        - name: host
          mountPath: /host
        - name: wins
          mountPath: \\.\pipe\rancher_wins
        - mountPath: /var/lib/kube-proxy
          name: kube-proxy
        - mountPath: /var/lib/kube-proxy-windows
          name: kube-proxy-windows
      nodeSelector:
        kubernetes.io/os: windows
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - operator: Exists
      volumes:
      - configMap:
          defaultMode: 420
          name: kube-proxy-windows
        name: kube-proxy-windows
      - configMap:
          name: kube-proxy
        name: kube-proxy
      - hostPath:
          path: /
        name: host
      - name: wins
        hostPath:
          path: \\.\pipe\rancher_wins
          type: null
  updateStrategy:
    type: RollingUpdate

