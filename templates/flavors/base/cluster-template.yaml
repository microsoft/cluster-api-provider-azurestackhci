---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: ${CLUSTER_NAME}
spec:
  clusterNetwork:
    pods:
      cidrBlocks: ["${AZURESTACKHCI_POD_CIDR}"]
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: AzureStackHCICluster
    name: ${CLUSTER_NAME}
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    name: "${CLUSTER_NAME}-control-plane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AzureStackHCICluster
metadata:
  name: ${CLUSTER_NAME}
spec:
  resourceGroup: "${AZURESTACKHCI_CLUSTER_RESOURCE_GROUP}"
  location: "westus"
  networkSpec:
    vnet:
      name: "${AZURESTACKHCI_VNET_NAME}"
  loadBalancer:
    image:
      osType: "Linux"
    sshPublicKey: ${AZURESTACKHCI_SSH_PUBLIC_KEY}
    vmSize: "${AZURESTACKHCI_LOAD_BALANCER_MACHINE_TYPE}"
  version: "${KUBERNETES_VERSION}"
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  infrastructureTemplate:
    kind: AzureStackHCIMachineTemplate
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    useExperimentalRetryJoin: true
    initConfiguration:
      nodeRegistration:
        name: '{{ ds.meta_data["local_hostname"] }}'
        kubeletExtraArgs:
          anonymous-auth: "false"
          cloud-provider: external
    joinConfiguration:
      nodeRegistration:
        name: '{{ ds.meta_data["local_hostname"] }}'
        kubeletExtraArgs: 
          cloud-provider: external
    clusterConfiguration:
      apiServer:
        timeoutForControlPlane: 20m
        extraArgs:
          cloud-provider: external
      controllerManager:
        extraArgs:
          terminated-pod-gc-threshold: "10"
          bind-address: "0.0.0.0"
          cloud-provider: external
      scheduler:
        extraArgs:
          bind-address: "0.0.0.0"
    postKubeadmCommands:
    - bash -c /tmp/kubeadm-postinstall.sh
    files:
    - path: /etc/kubernetes/cni/win-kube-proxy.yaml
      owner: "root:root"
      permissions: "0744"
      content: |
        ---
        apiVersion: v1
        data:
          run-script.ps1: |-
            $ErrorActionPreference = "Stop";
            mkdir -force /host/var/lib/kube-proxy/var/run/secrets/kubernetes.io/serviceaccount
            mkdir -force /host/kube-proxy
            cp -force /kube-proxy/* /host/kube-proxy
            cp -force /var/lib/kube-proxy/* /host/var/lib/kube-proxy
            cp -force /var/run/secrets/kubernetes.io/serviceaccount/* /host/var/lib/kube-proxy/var/run/secrets/kubernetes.io/serviceaccount #FIXME?
            $networkName = (Get-Content /host/etc/cni/net.d/* | ConvertFrom-Json).name
            $sourceVip = ($env:POD_IP -split "\.")[0..2] + 0 -join "."
            $filePath="/host/var/lib/kube-proxy/config.conf"
            $tempFilePath="/host/var/lib/kube-proxy/configCopy.conf"

            $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("sourceVip:")) {$_}}
            $replace = "  sourceVip: " + $sourceVip
            if ($find) {
                (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath
            } else {
                $replace = "winkernel:`r`n  sourceVip:" + $sourceVip + "`r`n"
                $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("winkernel:")) {$_}}
                if ($find) {
                    (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath    
                } else {
                    (Get-Content -Path $filePath) + $replace | Add-Content $tempFilePath
                }    
            }
            Remove-Item -Path $filePath
            Move-Item -Path $tempFilePath -Destination $filePath

            $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("networkName:")) {$_}}
            $replace = "  networkName: " + $networkName
            if ($find) {
                (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath
            } else {
                $replace = "winkernel:`r`n  networkName:" + $networkName + "`r`n"
                $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("winkernel:")) {$_}}
                if ($find) {
                    (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath    
                } else {
                    (Get-Content -Path $filePath) + $replace | Add-Content $tempFilePath
                }    
            }
            Remove-Item -Path $filePath
            Move-Item -Path $tempFilePath -Destination $filePath

            $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("WinOverlay:")) {$_}}
            $replace = "  WinOverlay: " + "true"
            if ($find) {
                (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath
            } else {
                $replace = "featureGates:`r`n  WinOverlay: true`r`n"
                $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("featureGates:")) {$_}}
                if ($find) {
                    (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath    
                } else {
                    (Get-Content -Path $filePath) + $replace | Add-Content $tempFilePath
                }    
            }
            Remove-Item -Path $filePath
            Move-Item -Path $tempFilePath -Destination $filePath
            
            $find = get-content $filePath | ForEach-Object -Process {if($_.Contains("mode:")) {$_}}
            $replace = "mode: " + "kernelspace"
            if ($find) {
                (Get-Content -Path $filePath) -replace $find, $replace | Add-Content $tempFilePath
            } else {
                $replace = "mode: kernelspace`r`n"
                (Get-Content -Path $filePath) + $replace | Add-Content $tempFilePath
            }
            Remove-Item -Path $filePath
            Move-Item -Path $tempFilePath -Destination $filePath
            wins cli process run --path /kube-proxy/kube-proxy.exe --args "--v=6 --config=/var/lib/kube-proxy/config.conf --hostname-override=$env:NODE_NAME --feature-gates=WinOverlay=true"
        kind: ConfigMap
        apiVersion: v1
        metadata:
          labels:
            app: kube-proxy 
          name: kube-proxy-windows
          namespace: kube-system
        ---
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          labels:
            k8s-app: kube-proxy
          name: kube-proxy-windows
          namespace: kube-system
        spec:
          selector:
            matchLabels:
              k8s-app: kube-proxy-windows
          template:
            metadata:
              labels:
                k8s-app: kube-proxy-windows
            spec:
              serviceAccountName: kube-proxy
              containers:
              - command:
                - powershell
                args:
                - -file
                - /var/lib/kube-proxy-windows/run-script.ps1
                env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: spec.nodeName
                - name: POD_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
                image: kubeproxywin/kube-proxy
                imagePullPolicy: IfNotPresent
                name: kube-proxy
                volumeMounts:
                - name: host
                  mountPath: /host
                - name: wins
                  mountPath: \\.\pipe\rancher_wins
                - mountPath: /var/lib/kube-proxy
                  name: kube-proxy
                - mountPath: /var/lib/kube-proxy-windows
                  name: kube-proxy-windows
              nodeSelector:
                beta.kubernetes.io/os: windows
              tolerations:
              - key: CriticalAddonsOnly
                operator: Exists
              - operator: Exists
              volumes:
              - configMap:
                  defaultMode: 420
                  name: kube-proxy-windows
                name: kube-proxy-windows
              - configMap:
                  name: kube-proxy
                name: kube-proxy
              - hostPath:
                  path: /
                name: host
              - name: wins
                hostPath:
                  path: \\.\pipe\rancher_wins
                  type: null
          updateStrategy:
            type: RollingUpdate
    - path: /tmp/kubeadm-postinstall.sh
      owner: "root:root"
      permissions: "0744"
      content: |
        #!/bin/bash
  
        set -euxo pipefail

        # Temp, this responsibility will move to caph
        function patch_node_providerid() {
          for value in {1..10}
          do
            sleep 1
            echo "Patch ProviderID (attempt $value)..."
            KUBECONFIG=/etc/kubernetes/admin.conf kubectl patch node {{ ds.meta_data["local_hostname"] }} -p $'spec:\n providerID: azurestackhci:////{{ ds.meta_data["local_hostname"] }}' >/dev/null 2>&1 || continue
            break
          done
        }

        patch_node_providerid
  version: "${KUBERNETES_VERSION}"
---
kind: AzureStackHCIMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      image:
        osType: "Linux"
      location: "westus"
      vmSize: ${AZURESTACKHCI_CONTROL_PLANE_MACHINE_TYPE}
      sshPublicKey: ${AZURESTACKHCI_SSH_PUBLIC_KEY}
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
  template:
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-md-0"
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "${CLUSTER_NAME}-md-0"
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: AzureStackHCIMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AzureStackHCIMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      image:
        osType: "Linux"
      location: "westus"
      vmSize: ${AZURESTACKHCI_WORKER_MACHINE_TYPE}
      sshPublicKey: ${AZURESTACKHCI_SSH_PUBLIC_KEY}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          name: '{{ ds.meta_data["local_hostname"] }}'
          kubeletExtraArgs:
            cloud-provider: external
      postKubeadmCommands:
        - bash -c /tmp/kubeadm-postinstall.sh
      files:
        - path: /tmp/kubeadm-postinstall.sh
          owner: "root:root"
          permissions: "0744"
          content: |
            #!/bin/bash

            set -euxo pipefail

            # Temp, this responsibility will move to caph
            function patch_node_providerid() {
              for value in {1..10}
              do
                sleep 1
                echo "Patch ProviderID (attempt $value)..."
                KUBECONFIG=/etc/kubernetes/kubelet.conf kubectl patch node {{ ds.meta_data["local_hostname"] }} -p $'spec:\n providerID: azurestackhci:////{{ ds.meta_data["local_hostname"] }}' >/dev/null 2>&1 || continue
                break
              done
            }

            patch_node_providerid
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-md-1"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${AZURESTACKHCI_WINDOWS_WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
  template:
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "1.16.2"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-md-1"
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "${CLUSTER_NAME}-md-1"
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: AzureStackHCIMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: AzureStackHCIMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-md-1"
spec:
  template:
    spec:  
      image:
        osType: "Windows"
      location: "westus"
      vmSize: ${AZURESTACKHCI_WINDOWS_WORKER_MACHINE_TYPE}
      sshPublicKey: ${AZURESTACKHCI_SSH_PUBLIC_KEY}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: "${CLUSTER_NAME}-md-1"
spec:
  template:
    spec:
      files:
        - path: C:\ECP-Cache\WaitForDocker.ps1
          permissions: "0744"
          content: |
            #ps1
            for($i = 0; $i -lt 60; $i++) {
              if ((Get-Service docker).Status -eq "Running")
              {
                echo "Docker service is running."
                exit
              }
              echo "Waiting docker service..."
              start-sleep -s 2
            }
        - path: C:\ECP-Cache\ApplyPatch.ps1
          permissions: "0744"
          content: |
            #ps1
            C:\ECP-Cache\kubernetes\kubectl.exe --kubeconfig=C:\etc\kubernetes\kubelet.conf patch node {{ v1.local_hostname }} -p "spec:`r`n providerID: azurestackhci:////{{ v1.local_hostname }}"
      joinConfiguration:
        nodeRegistration:
          name: '{{ v1.local_hostname }}'
      preKubeadmCommands:
        - powershell C:\ECP-Cache\WaitForDocker.ps1
        - docker network create -d nat host
        - powershell -C "ipmo C:\ECP-Cache\hns.psm1;New-HNSNetwork -Type \"overlay\" -AddressPrefix \"192.168.255.0/30\" -Gateway \"192.168.255.1\" -Name \"External\" -AdapterName \"Ethernet 2\" -SubnetPolicies @(@{Type = \"VSID\"; VSID = 9999; }); start-sleep 10;"  
      postKubeadmCommands:
        - powershell C:\ECP-Cache\StartFlannel.ps1
        - copy C:\Users\Administrator\.ssh\authorized_keys C:\ProgramData\ssh\administrators_authorized_keys
        - icacls C:\ProgramData\ssh\administrators_authorized_keys /inheritance:r
        - icacls C:\ProgramData\ssh\administrators_authorized_keys /grant "NT AUTHORITY\SYSTEM":R
        - powershell C:\ECP-Cache\ApplyPatch.ps1
